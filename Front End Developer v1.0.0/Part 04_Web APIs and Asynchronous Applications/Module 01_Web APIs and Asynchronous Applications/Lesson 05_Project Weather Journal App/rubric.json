{
  "id": 2655,
  "project_id": 632,
  "upload_types": [
    "repo",
    "zip"
  ],
  "file_filter_regex": "\\A(?!(((.*/)?(__MACOSX|\\.git|node_modules|bower_components|jspm_packages|\\.idea|build|.ipynb_checkpoints|\\.Trash-0|logs)(\\Z|/))))((.*\\.(js|css|py|html|htm|txt|md|markdown|sql|swift|java|gradle|xml|rst|yml|yaml|rmd|pdf|docx|h|H|hh|hxx|h\\+\\+|c|C|cc|cpp|cxx|c\\+\\+)\\Z)|((.*/)?(README|Readme|readme|Makefile)\\Z))",
  "nomination_eligible": false,
  "stand_out": "",
  "hide_criteria": false,
  "created_at": "2019-07-09T00:22:00.052Z",
  "updated_at": "2019-10-09T17:03:48.883Z",
  "hashtag": "",
  "max_upload_size_mb": 500,
  "estimated_sla": null,
  "project_assistant_enabled": false,
  "checkmate_enabled": false,
  "checkmate_metadata": null,
  "available_for_cert_project": false,
  "classroom_node_id": 899077,
  "classroom_project_key": "4026017b-6c7d-40b3-9ce8-92e2cc835bad",
  "language": "en-us",
  "ndkeys": [
    "nd001",
    "nd001beta",
    "nd0011",
    "nd0011-cn",
    "nd0011-connect",
    "nd0011-ent"
  ],
  "coursekeys": [],
  "sections": [
    {
      "id": 5656,
      "name": "Project Environment Setup",
      "created_at": "2019-07-09T00:23:20.870Z",
      "updated_at": "2019-07-10T20:56:44.405Z",
      "deleted_at": null,
      "position": 0,
      "rubric_id": 2655,
      "rubric_items": [
        {
          "id": 16253,
          "section_id": 5656,
          "passed_description": "Node and Express should be installed on the local machine. The project file `server.js` should require `express()`, and should create an instance of their app using express.\n\nThe Express app instance should be pointed to the project folder with .html, .css, and .js files.",
          "exceeded_description": null,
          "created_at": "2019-07-10T20:57:07.696Z",
          "updated_at": "2019-07-10T21:11:08.649Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Node and Express Environment",
          "exceedable": false
        },
        {
          "id": 16254,
          "section_id": 5656,
          "passed_description": "The ‘cors’ package should be installed in the project from the command line, required in the project file `server.js`, and the instance of the app should be setup to use `cors()`.\n\nThe `body-parser` package should be installed and included in the project.",
          "exceeded_description": null,
          "created_at": "2019-07-10T20:57:44.430Z",
          "updated_at": "2019-07-10T21:11:08.653Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Project Dependencies",
          "exceedable": false
        },
        {
          "id": 16255,
          "section_id": 5656,
          "passed_description": "Local server should be running and producing feedback to the Command Line through a working callback function.",
          "exceeded_description": null,
          "created_at": "2019-07-10T20:58:11.805Z",
          "updated_at": "2019-07-10T21:11:08.656Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Local Server",
          "exceedable": false
        },
        {
          "id": 16256,
          "section_id": 5656,
          "passed_description": "Create API credentials on OpenWeatherMap.com",
          "exceeded_description": null,
          "created_at": "2019-07-10T20:58:52.383Z",
          "updated_at": "2019-07-10T21:11:08.658Z",
          "deleted_at": null,
          "optional": false,
          "position": 3,
          "criteria": "API Credentials",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5666,
      "name": "APIs and Routes",
      "created_at": "2019-07-10T20:56:09.027Z",
      "updated_at": "2019-07-10T20:56:44.408Z",
      "deleted_at": null,
      "position": 1,
      "rubric_id": 2655,
      "rubric_items": [
        {
          "id": 16257,
          "section_id": 5666,
          "passed_description": "There should be a JavaScript Object named `projectData` initiated in the file `server.js`to act as the app API endpoint.",
          "exceeded_description": null,
          "created_at": "2019-07-10T20:59:40.235Z",
          "updated_at": "2019-07-10T21:11:08.662Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "APP API Endpoint",
          "exceedable": false
        },
        {
          "id": 16258,
          "section_id": 5666,
          "passed_description": "The personal API Key for OpenWeatherMap API is saved in a named `const` variable.\n\nThe API Key variable is passed as a parameter to `fetch()` .\n\nData is successfully returned from the external API.",
          "exceeded_description": null,
          "created_at": "2019-07-10T20:59:54.848Z",
          "updated_at": "2019-07-10T21:11:08.665Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Integrating OpenWeatherMap API",
          "exceedable": false
        },
        {
          "id": 16259,
          "section_id": 5666,
          "passed_description": "There should be a GET route setup on the server side with the first argument as a string naming the route, and the second argument a callback function to return the JS object created at the top of server code.",
          "exceeded_description": null,
          "created_at": "2019-07-10T21:00:37.023Z",
          "updated_at": "2019-07-10T21:11:08.668Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Return Endpoint Data\n\nGET Route I: Server Side ",
          "exceedable": false
        },
        {
          "id": 16260,
          "section_id": 5666,
          "passed_description": "There should be an asynchronous function to fetch the data from the app endpoint",
          "exceeded_description": null,
          "created_at": "2019-07-10T21:01:14.229Z",
          "updated_at": "2019-07-10T21:11:08.670Z",
          "deleted_at": null,
          "optional": false,
          "position": 3,
          "criteria": "Return Endpoint Data\n\nGET Route II: Client Side",
          "exceedable": false
        },
        {
          "id": 16261,
          "section_id": 5666,
          "passed_description": "You should be able to add an entry to the project endpoint using a POST route setup on the server side and executed on the client side as an asynchronous function.\n\nThe client side function should take two arguments, the URL to make a POST to, and an object holding the data to POST.\n\nThe server side function should create a new entry in the apps endpoint (the named JS object) consisting of the data received from the client side POST.",
          "exceeded_description": null,
          "created_at": "2019-07-10T21:02:09.417Z",
          "updated_at": "2019-07-10T21:11:08.673Z",
          "deleted_at": null,
          "optional": false,
          "position": 4,
          "criteria": "POST Route",
          "exceedable": false
        }
      ]
    },
    {
      "id": 5667,
      "name": "Dynamic UI",
      "created_at": "2019-07-10T20:56:44.597Z",
      "updated_at": "2019-07-10T20:57:07.560Z",
      "deleted_at": null,
      "position": 2,
      "rubric_id": 2655,
      "rubric_items": [
        {
          "id": 16262,
          "section_id": 5667,
          "passed_description": "The `input` element with the `placeholder` property set to “enter zip code here” should have an `id` of `zip`.\n\nThe `textarea` included in project HTML should have an `id` of `feelings`.\n\nThe button included in project HTML should have an `id` of `generate`.",
          "exceeded_description": null,
          "created_at": "2019-07-10T21:02:38.114Z",
          "updated_at": "2019-07-10T21:11:08.678Z",
          "deleted_at": null,
          "optional": false,
          "position": 0,
          "criteria": "Naming HTML Inputs and Buttons For Interaction",
          "exceedable": false
        },
        {
          "id": 16263,
          "section_id": 5667,
          "passed_description": "The div with the `id`, `entryHolder` should have three child divs with the ids:\n- `date`\n- `temp`\n- `content`\n",
          "exceeded_description": null,
          "created_at": "2019-07-10T21:03:04.523Z",
          "updated_at": "2019-07-10T21:11:08.680Z",
          "deleted_at": null,
          "optional": false,
          "position": 1,
          "criteria": "Assigning Element Properties Dynamically",
          "exceedable": false
        },
        {
          "id": 16264,
          "section_id": 5667,
          "passed_description": "Adds an event listener to an existing HTML button from DOM using Vanilla JS. \n\nIn the file `app.js`, the element with the `id` of `generate` should have an `addEventListener()` method called on it, with `click` as the first parameter, and a named callback function as the second parameter.",
          "exceeded_description": null,
          "created_at": "2019-07-10T21:03:39.896Z",
          "updated_at": "2019-07-10T21:11:08.683Z",
          "deleted_at": null,
          "optional": false,
          "position": 2,
          "criteria": "Event Listeners",
          "exceedable": false
        },
        {
          "id": 16265,
          "section_id": 5667,
          "passed_description": "Sets the properties of existing HTML elements from the DOM using Vanilla JavaScript.\n\nIncluded in the async function to retrieve that app’s data on the client side, existing DOM elements should have their `innerHTML` properties dynamically set according to data returned by the app route.",
          "exceeded_description": null,
          "created_at": "2019-07-10T21:04:00.870Z",
          "updated_at": "2019-07-10T21:11:08.686Z",
          "deleted_at": null,
          "optional": false,
          "position": 3,
          "criteria": "Dynamically Update UI",
          "exceedable": false
        }
      ]
    }
  ],
  "project": {
    "id": 632,
    "name": "Weather Journal App",
    "nanodegree_key": "nd001",
    "is_cert_project": false,
    "audit_project_id": null,
    "hashtag": null,
    "audit_rubric_id": null,
    "entitlement_required": false,
    "is_career": false,
    "recruitment_family_id": 12,
    "awaiting_review_count": 0,
    "awaiting_review_count_by_language": {},
    "awaiting_audit_count": 0,
    "awaiting_quality_audit_count": 0,
    "awaiting_training_audit_count": 0,
    "created_at": "2019-07-11T04:08:26.865Z",
    "updated_at": "2020-05-11T18:54:56.738Z",
    "price": "7.0",
    "ungradeable_price": "3.0",
    "audit_price": null
  }
}