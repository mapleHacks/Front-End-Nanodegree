{
  "data": {
    "lesson": {
      "id": 906933,
      "key": "f04d6770-d0f2-4c4f-b5e2-199db5d3d53e",
      "title": "Project: FEND Capstone - Travel App",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "Build a travel app, combining all of your Front End skills into an amazing capstone project for your portfolio. Utilize multiple APIs to present a user with all they need to know about their trip.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": null,
      "project": {
        "key": "51287eb2-ed5e-4df4-9e5d-d64742fbc2ca",
        "version": "1.0.0",
        "locale": "en-us",
        "duration": 30240,
        "semantic_type": "Project",
        "title": "FEND Capstone - Travel App",
        "description": "# FEND Capstone Project: Travel App\n\nThis project requires you to build out a travel app that, at a minimum, obtains a desired trip location & date from the user, and displays weather and an image of the location using information obtained from external APIs. Given that this is the Capstone project, it's highly encouraged for you to go above and beyond, adding additional functionality and customization to truly stand out with a project you are proud to have at the top of your portfolio!\n\n## Project Files\n\nIf you'd like to start from scratch without any files, you are encouraged to do so! You learn the most by developing on your own! But, it can be a bit challenging having to start from scratch. There’s not the standard starter code you’re used to. If you would like to start with starter code, duplicate your code from project 3 and start there. See the earlier **Getting Started** page for an example visual of one potential finished product.\n\n## Rubric\n\nYour project will be evaluated by a Udacity code reviewer according to the Travel Planner App [project rubric](https://review.udacity.com/#!/rubrics/2669/view). Please review for detailed project requirements.\n\n## Submission\n\nOnce you've met all of the rubric requirements, you can submit your project as either a zip file or a Github repository link below.\n\n",
        "is_public": true,
        "summary": null,
        "forum_path": "",
        "rubric_id": "2669",
        "terminal_project_id": null,
        "resources": null,
        "image": null
      },
      "lab": null,
      "concepts": [
        {
          "id": 906935,
          "key": "644b7809-6e07-4168-ba8d-dc5bc5bcd5c8",
          "title": "Project Introduction",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "644b7809-6e07-4168-ba8d-dc5bc5bcd5c8",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907157,
              "key": "21c4d699-4798-429d-8565-f06f7cba379b",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Project Summary\nThis project aims to give you the opportunity to put all of the skills you have learned into one project to build your own custom travel app. Due to the nature of this course, it is very JavaScript heavy, but it is still expected you create clean and appealing HTML/CSS. You will also be targeting the DOM, working with objects, and retrieving data from 3 APIs in which one of those is reliant on another to work. Finally, this is all going to be done in a Webpack environment, using an express server, and wrapped up with service workers.\n\nFor this project, refactor and test as much as possible while you are building. You should figure for every piece of functionality you add, you will likely spend just as much time testing and refactoring your code. If it takes you 5 hours to figure out the logic, it should likely take you another 5 hours determining that you wrote the best code possible. As your skills improve, this process will feel more natural. Make sure to remove any debugging code from your final submission. \n\nThe minimum requirements ask a fair amount from you, but the final app is quite simple. A roadmap to expand on the application and make it uniquely your own is provided. \n",
              "instructor_notes": ""
            },
            {
              "id": 907158,
              "key": "dd8ce726-57b9-4495-b37f-c338b9522939",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What You Will Build:\n\nYou will be building a travel application. It’s common to pull basic data from an API, but many applications don’t just pull the weather, they pull in multiple types of data, from different sources and occasionally one API will be required to get data from another API. \n\nThe project will include a simple form where you enter the location you are traveling to and the date you are leaving. If the trip is within a week, you will get the current weather forecast. If the trip is in the future, you will get a predicted forecast. The OpenWeather API is fantastic but it doesn’t let you get future data for free and it’s not that flexible with what information you enter; we are going to use the Weatherbit API for you to see how another API accomplishes the same goals. Weatherbit API has one problem, it only takes in coordinates for weather data -- it’s that specific. So, we’ll need to get those coordinates from the Geonames API. Once we have all of this data, we’ll want to display an image of the location entered; for this, we will be using the Pixabay API. \n\nThis may not sound like a lot, but there is a fair amount of moving pieces that rely on each other to work. You’ll need to plan out the logic of what you are trying to accomplish before you begin developing. There are a lot of paths you can take, and what you choose to display and how you display it is somewhat flexible. It is highly recommended that after you meet the minimum requirements in the rubric, you continue debugging the UX and improve the project. ",
              "instructor_notes": ""
            },
            {
              "id": 907159,
              "key": "db986c78-1dac-4bcf-bf69-56a8b160f50e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## What will I learn?\n\nAt this point, you have learned all of the technical skills necessary to complete this project. You will likely stumble along the way and find that there are some pieces you didn’t encounter in the past projects. Remember, if you get stuck, you should always look things up. Sometimes just articulating the problem renders a solution. \n\nThe following are just some of the questions that you’ll experience along the way:\n- What’s the ideal workflow?\n- How many files do I need?\n- How do I convert one project into another?\n- Should I redo the HTML/CSS first or go straight to the javascript?\n- How many JavaScript functions do I need?\n- Should my function be this many lines of code?\n- Is readability or performance more important?\n\nThere’s no single correct answer to each question. While building this project, working with peers, and getting feedback from the project reviewer -- you will naturally develop your own answers to these questions!\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 907147,
          "key": "65c2663e-4eb8-46b9-8a3f-e88e928875df",
          "title": "Getting Started",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "65c2663e-4eb8-46b9-8a3f-e88e928875df",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907160,
              "key": "3f79a155-7d3c-49cb-ba3c-d8226158c626",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Getting Started\n\n## Introduction\n\nThis project requires you to build out a travel app that, at a minimum, obtains a desired trip location & date from the user, and displays weather and an image of the location using information obtained from external APIs. Given that this is the Capstone project, it's highly encouraged for you to go above and beyond, adding additional functionality and customization to truly stand out with a project you are proud to have at the top of your portfolio!\n\n## Project Rubric\n\nYour project will be evaluated by a Udacity code reviewer according to the Travel Planner App [project rubric](https://review.udacity.com/#!/rubrics/2669/view). Please review for detailed project requirements.\n\n\n",
              "instructor_notes": ""
            },
            {
              "id": 907161,
              "key": "4f5c768b-cda4-47cd-bd27-b85d0eb57780",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Get the Starter Code\n\nIf you'd like to start from scratch without any files, you are encouraged to do so! You learn the most by developing on your own! But, it can be a bit challenging having to start from scratch. There’s not the standard starter code you’re used to. If you would like to start with starter code, duplicate your code from project 3 and start there. Here is just one possibility for the visual of this project. Of course, you can style it how you choose, and extending the project will dictate the final appearance. \n",
              "instructor_notes": ""
            },
            {
              "id": 907162,
              "key": "38276aeb-7b2e-4bfa-922f-e08eea277513",
              "title": null,
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/August/5d44825f_travel-app-project-mockup/travel-app-project-mockup.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/38276aeb-7b2e-4bfa-922f-e08eea277513",
              "caption": "An example Travel App, both at minimum and with additional functionality",
              "alt": "An example Travel App, both at minimum and with additional functionality",
              "width": 550,
              "height": 720,
              "instructor_notes": null
            },
            {
              "id": 907163,
              "key": "d788153f-0c67-4ded-8593-6c9aaea89aa2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Before you begin...\n\nBefore moving forward, reacquaint yourself with project 3 & 4. After, ask yourself:\n- What is the [Document](https://developer.mozilla.org/en-US/docs/Web/API/Document)?\n- What are [events](https://developer.mozilla.org/en-US/docs/Web/API/Event)?\n  - How do we [listen for them](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)?\n- How can we [access elements](https://www.w3schools.com/js/js_htmldom_elements.asp) within the DOM?\n- We can also access elements with [getElementsByClassName()](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName). What does this method return, and how do you use it?\n- Every element has an [innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML) property that represents the markup of the element's content. How can you leverage this property to get and set content?\n- What is the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) and how can we use it to get data? \n- What are [callback functions](https://developer.mozilla.org/en-US/docs/Glossary/Callback_function) and how do we use them appropriately? \n- What is [asynchronous javascript](https://developers.google.com/web/fundamentals/primers/async-functions)? \n- How/Why do we use [Express](https://expressjs.com/)?\n- How/Why do we use [Webpack](https://webpack.js.org/)?\n- How/Why do we use [service workers](https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API)? ",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 907148,
          "key": "be409c00-ffa9-4140-aefb-eb035d43da07",
          "title": "Development Strategy",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "be409c00-ffa9-4140-aefb-eb035d43da07",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 907164,
              "key": "b456f0f5-0872-4607-9d38-0042b3208bb4",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Development Strategy\n\nIt's very important that you *plan your project* before you start writing any code! Break your project down into *small* pieces of work and strategize your approach to each one. With these bite-sized amounts, it'll be easier to debug and fix any issues that appear.\n\nFeel free to implement your own design workflow, but if you get stuck -- here is a walkthrough to get you up and running!\n\n1. **Start by duplicating your project 3 weather app.** Once duplicated, change the new project’s name to make certain you're not overwriting your old project. We are going to build off this project as a foundation.\n2. **Get webpack set up to work with this project.** Use the skills you learned in project 4 to get your development environment going. \n  - Create your `src` folder first. The `src` folder should contain a client folder and a server folder. \n  - Your server folder should contain your `server.js` content. \n  - Your client folder should contain a `js` folder, `media` folder, `styles` folder, and `views` folder, as well as an `index.js` file.\n  - Your application js should go into the `js` file, your css into `styles`, and your `index.html` into `views`. \n  - Convert your stylesheet from a `.css` file to a `.scss` file\n  - Remember that webpack builds a `dist` file. You’ll need to update your server js to access the `dist` folder. (Hint: `app.use(express.what goes here?)`)\n  - Your `index.js` file inside the client folder should import the main function of your application javascript, it should import your scss, and it should export your main function from your application javascript. But in order to import, where will you need to export it?\n  - In project 4, you may have added your event listeners to the buttons themselves. For this project, you should be using `.addEventListener()`; If we are exporting functions from our `application.js` file, our event listeners can’t go there. Where can we put them? To call that exported function?\n  - Now that your src folder is set up, it’s time to get webpack going. You should already have a few dependencies installed from project 3. We need to add babel, babel loader, css loader, file loader, html loader, html webpack plugin, node sass, sass loader, style loader, webpack, webpack cli, and webpack dev server. Refer to your project 4 to see what’s there, most of these should have been in use there. \n  - Next, update the scripts in `package.json`. You will want to have `test`, `dev`, `start`, and `build`. \n    **NOTE:** Start will be for your express server, dev will be so that you can take advantage of web dev server. It is possible depending on your setup to run both of these with one command. \n  - Get your webpack config set up. Should be fairly similar to your language processing app webpack config. If you did not use webpack dev server in your language processing app, you will want to do so here. Additionally, using source maps will help you debug your css. \n  - To get webpack running, you’ll want to first run `npm run dev`, then `npm build` to get your `dist` folder created. Once that is created you can run `npm run dev` and `npm start` simultaneously to have hot loading of your project as well as a working express environment. \n    **NOTE:** If needed, reference the stripped-down version of project 3 with webpack in the starter documentation.\n3. **Create an account with [Geonames](http://www.geonames.org/export/web-services.html).**\n4. **Replace the openweather api with geonames api.** You already have one working api. What information needs to get adjusted so that instead of entering a zip code, you enter a city? We want to get the latitude, longitude, country, instead of getting the temperature, feeling, and date.\n  - The weather data array was named differently, what do we need to change the name to?\n  - The weather data only had 1 object in the array, the geoname api outputs multiple objects. How do we call the first object?\n5. **Introduce a countdown.** You’ll need to add a text field to your project to get the date.\n  - What type of input should it be? What about cross browser rendering?\n  - We’re looking to see how soon the trip is, how can you get the information from the DOM and see how soon that date is?\n  - Where should you be storing that data once you have it? \n6. **Create an account with [Weatherbit](https://www.weatherbit.io/account/create).**\n7. **Integrate the Weatherbit API similarly to how you integrated the geoname api.** What information needs to get adjusted for you to pull in the future weather? Getting a CORS error? Check out [this article](https://medium.com/@dtkatz/3-ways-to-fix-the-cors-error-and-how-access-control-allow-origin-works-d97d55946d9) for some options. \n    **NOTE:** If you see that your app is working, but it takes several clicks to get all of the data, think of why this could be. This is possibly the most challenging part of the project. There is a major hint located in the *Before you Begin* section. If you’re unable to figure it out, and your app still works with a few clicks, continue working on it, it may come to you later, or you’ll get guidance from your reviewer when you submit the app. \n  - How does the Weatherbit API distinguish from the current forecast and future forecasts? Does the API change in any way?\n  - How will we include the date? What format does it need to be in? How can we change it to the appropriate format? \n8. **Create an account with [Pixabay](https://pixabay.com/api/docs/).**\n9. **Integrate the Pixabay API similarly to how you integrated the Geoname/Weatherbit APIs.** What information are you going to submit to the API to achieve an appropriate image? What if there are no results?\n  - What Parameters will you want to set to pull in images?\n  - How will you submit your data from the location field to a Pixabay URL parameter without having spaces in the url?\n10. **Choose one of the items from the suggested list to add in.** The items vary in complexity, but you must choose at least 1, all others are optional. \n11. **REFACTOR.** At this point, your code should be working properly. Ideally, refactoring happens while you are developing, but as a new developer, you often don’t have the whole picture in your head to be able to do so properly.  Let’s clean the project up. \n  - Have you run your code through a linter? We request you still follow Udacity standards when the code is complete, but running it through an [eslinter](https://eslint.org/demo) is going to help you get started in refactoring. \n  - Are you using ES6 const and let? \n  - Are all your functions using ES6 arrow functions?\n  - Is your code DRY? Are there any pieces that would be better served as a helper function to avoid duplication?\n  - How is your code structured? Have you created functions for the main functionality with properly scoped variables? Starting out it’s likely that you will have a globally scoped variables on occasion until you learn more about closures and design patterns. But placing your code into functions is a great way to make your code more readable and a way to avoid globally scoped variables. \n  - Are your project files named in a way that makes sense? \n12. **Add in services workers.** Refer to project 4 for guidance. ",
              "instructor_notes": ""
            },
            {
              "id": 907165,
              "key": "fba822fe-dbd9-4b13-b930-9d70583e63f3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Extend your Project Further -  Roadmap/Strategy\n\nYou'l need to implement *at least one* of the below in the project. If you’re going to do any of the suggested tasks, it’s recommended that you hold off on service workers until you are closer to submitting. This is a good use for comments. \n\n- Add end date and display length of trip. \n- Pull in an image for the country from Pixabay API when the entered location brings up no results (good for obscure localities). \n- Allow user to add multiple destinations on the same trip.\n  - Pull in weather for additional locations.\n- Allow the user to add hotel and/or flight data.\n  - Multiple places to stay? Multiple flights?\n- Integrate the [REST Countries API](https://restcountries.eu/) to pull in data for the country being visited. \n- Allow the user to remove the trip.\n- Use [Local Storage](https://www.taniarascia.com/how-to-use-local-storage-with-javascript/) to save the data so that when they close, then revisit the page, their information is still there. \n- Instead of just pulling a single day forecast, pull the forecast for multiple days.\n- Incorporate icons into forecast.\n- Allow user to Print their trip and/or export to PDF.\n- Allow the user to add a todo list and/or packing list for their trip.\n- Allow the user to add additional trips (this may take some heavy reworking, but is worth the challenge). \n  - Automatically sort additional trips by countdown.\n  - Move expired trips to bottom/have their style change so it’s clear it’s expired.",
              "instructor_notes": ""
            },
            {
              "id": 907166,
              "key": "5b853346-9b9d-490f-a349-9508ad329baa",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Version Control\n\nAlthough not a requirement, we recommend using Git from the very beginning. Make sure to commit often and to use well-formatted commit messages that conform to our [Git Style Guide](https://udacity.github.io/git-styleguide/).",
              "instructor_notes": ""
            },
            {
              "id": 907167,
              "key": "119fbffb-d8c3-459f-afac-d497dc69ba42",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Udacity Style Guides\n\nYou should write your code and markup to meet the specifications provided in these style guides:\n\n- [CSS Style Guide](http://udacity.github.io/frontend-nanodegree-styleguide/css.html)\n- [HTML Style Guide](http://udacity.github.io/frontend-nanodegree-styleguide/index.html)\n- [JavaScript Style Guide](http://udacity.github.io/frontend-nanodegree-styleguide/javascript.html)\n- [Git Style Guide](https://udacity.github.io/git-styleguide/)\n",
              "instructor_notes": ""
            },
            {
              "id": 907168,
              "key": "e9f288ec-3fad-48c3-a1e9-4aaffa80cdba",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Still Not Sure How to Begin?\n\nTo reiterate, be sure that you are comfortable with the content from all previous coursework, especially your weather and language processing apps; you should keep those handy to reference through the project. \n\nA note on plagiarism: Viewing someone else’s code to get a general idea of implementation, then putting it away and starting to write your own code from scratch is okay. **Please do not copy someone's code**, in whole or in part. For further details, check out this [guide regarding plagiarism](https://udacity.zendesk.com/hc/en-us/categories/360000151251-Plagiarism).",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}