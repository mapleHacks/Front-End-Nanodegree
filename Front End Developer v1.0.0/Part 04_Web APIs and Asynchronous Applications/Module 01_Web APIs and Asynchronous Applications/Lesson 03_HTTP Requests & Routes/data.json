{
  "data": {
    "lesson": {
      "id": 860326,
      "key": "f1b56940-804a-4b26-9ce0-ec3efa25be28",
      "title": "HTTP Requests & Routes",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "In this lesson students will learn how to use Express to setup server side routes and execute client side handlers for GET and POST requests.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": false,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/f1b56940-804a-4b26-9ce0-ec3efa25be28/860326/1572420087438/HTTP+Requests+%26+Routes+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/f1b56940-804a-4b26-9ce0-ec3efa25be28/860326/1572420085054/HTTP+Requests+%26+Routes+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 860324,
          "key": "17a01afa-4238-4e33-96fe-c617ee95337a",
          "title": "Routes & GET Requests",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "17a01afa-4238-4e33-96fe-c617ee95337a",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 860300,
              "key": "1db998c7-fe9b-41a9-b524-ebc691782892",
              "title": "Routes & GET Requests Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Routes: GET Requests",
              "instructor_notes": ""
            },
            {
              "id": 860289,
              "key": "137fd4e8-3860-4cbb-a43e-777a8eab9213",
              "title": "ND#0001 C3 L3 A01 Routes And GET Requests",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "0lX0JI9Yq60",
                "china_cdn_id": "0lX0JI9Yq60.mp4"
              }
            },
            {
              "id": 1016098,
              "key": "a18ab781-53f1-47e4-8f61-98622f3d7cc1",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this example below, `app.get()` is used to make a GET request, the first parameter is the particular URL -- in this case our project home page, and a callback function to execute. Inside the callback function a response is sent using `.send()`, and in this case the response is a string that says 'hello world'. The real life execution of this code would mean that whenever the project home URL is visited in the browser, there will be a GET request made to the server, and the response will be shown in the browser, so the words 'hello world' would appear on the screen.\n```\nvar express = require('express');\nvar app = express();\n\n// respond with \"hello world\" when a GET request is made to the homepage\napp.get('/', function (req, res) {\n  res.send('hello world');\n})\n```\n\n## Request and Response Parameters \n\nThe `req` parameter signifies the \"request\" from the client to the server. \nThe `res` parameter signifies the \"response\" from the server to the client. \n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 900331,
          "key": "cba89778-dec0-42b0-8ca0-3e683919a9a7",
          "title": "Exercise: GET requests",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "cba89778-dec0-42b0-8ca0-3e683919a9a7",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900635,
              "key": "43b53d7e-2725-4c5f-bbc6-535b8eccccb4",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848937c900331xJUPYTERLjdnftp8u",
              "pool_id": "jupyterlab",
              "view_id": "jupyter-lab-runa4",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "4",
                    "pageStart": "4",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 899040,
          "key": "0fb536c7-a360-4cbc-b480-f4d4606b0fa3",
          "title": "More Powerful GET Requests",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0fb536c7-a360-4cbc-b480-f4d4606b0fa3",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 860298,
              "key": "4dabb1eb-8132-4dfb-9000-d4563825c3af",
              "title": "Routes & GET Requests Example Prep",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# More Powerful GET Requests\n\nHello world is all well and good, but suppose we wanted to make a GET request for some more useful data. GET requests can return all kinds of data, for example, imagine we wanted a JavaScript object to hold user data for us.\n- At the top of the demo code we just looked at, we could create an empty JavaScript object with the code `const appData = {}`. The variable `appData` now acts as the endpoint for all our app data. Later we will learn how to POST data to the app endpoint, but first let's add the line of code that will return our JavaScript object when the GET request is made.",
              "instructor_notes": ""
            },
            {
              "id": 860293,
              "key": "06e31d9a-b419-4c7b-a584-c2f3b6f374d3",
              "title": "Routes & GET Requests Example",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "```\nvar express = require('express')\nvar app = express()\n// Create JS object\nconst appData = {}\n// Respond with JS object when a GET request is made to the homepage\napp.get('/all', function (req, res) {\n  res.send(appData)\n})\n```",
              "instructor_notes": ""
            },
            {
              "id": 860291,
              "key": "351cad9e-86d0-4191-8dee-86c30498c34b",
              "title": "Routes & GET Requests Example Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In this example, we created a new route named '/all', so that the route 'localhost:3000/all' will now trigger the GET request, which will return the JavaScript object as laid out in the server code above.\n- Notice, the callback function of the GET request takes two parameters, arbitrarily named `req` and `res` in this example. Every GET request produces a request, which is the data provided by the GET request, and a response, which is the data returned to the GET request. Below, you can see the long list of information that comes with each GET request:",
              "instructor_notes": ""
            },
            {
              "id": 860288,
              "key": "277a293e-dcf8-4b3a-9865-c2bd83d0540a",
              "title": "Routes & GET Requests Graphic",
              "semantic_type": "ImageAtom",
              "is_public": true,
              "url": "https://video.udacity-data.com/topher/2019/July/5d23afd9_get-data/get-data.png",
              "non_google_url": "https://s3.cn-north-1.amazonaws.com.cn/u-img/277a293e-dcf8-4b3a-9865-c2bd83d0540a",
              "caption": "A portion of the data returned by the `req` (request) parameter of a GET route.",
              "alt": "A portion of the data returned by the `req` (request) parameter of a GET route.",
              "width": 1600,
              "height": 1239,
              "instructor_notes": null
            },
            {
              "id": 860315,
              "key": "79269ee5-92cf-45ad-82fc-106524ccd0b1",
              "title": "Routes & GET Requests Quiz",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "79269ee5-92cf-45ad-82fc-106524ccd0b1",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Add a GET route to an `app` instance, using the path ‘/data’, and a function with the parameters `req` and `res`, and returns the string ‘welcome!’ ",
                "matchers": [
                  {
                    "expression": "app\\.get\\(('|\")\\/data('|\")\\,\\sfunction\\s\\(req\\,\\sres\\)\\s*\\{(\\r\\n|\\r|\\n)\\s*res.send\\(('|\")welcome\\!('|\")\\)\\;(\\r\\n|\\r|\\n)\\}\\)\\;"
                  }
                ]
              }
            },
            {
              "id": 909757,
              "key": "35e179b8-55e6-4265-b551-493672db1b87",
              "title": "Routes & GET Requests Quiz 1 Solution",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div id=\"spoiler_1\" style=\"display:none\">\n```js\napp.get('/data', function (req, res) {\n  res.send('welcome!');\n});\n```\n</div>\n<button title=\"Click to show/hide content\" type=\"button\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}\">Show Solution</button>\n",
              "instructor_notes": ""
            },
            {
              "id": 860290,
              "key": "2d06f838-4a64-4d31-b3c7-832b38ffa303",
              "title": "Routes & GET Requests Quiz 2",
              "semantic_type": "ReflectAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "2d06f838-4a64-4d31-b3c7-832b38ffa303",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "title": "Reflect",
                "semantic_type": "TextQuestion",
                "evaluation_id": null,
                "text": "The arguments for GET and POST route callback functions are often interchangeably named `(req, res)` and `(request, response)`. Which one of these makes more sense to use? What if you had to write them twenty or fifty times in a coding session? You can name these arguments for GET and POST requests anything you like, but it should be meaningful and effective."
              },
              "answer": {
                "text": "Thanks for your response.",
                "video": null
              }
            },
            {
              "id": 860292,
              "key": "6ae26c65-9627-44ec-8ba3-63ef492b98b9",
              "title": "Routes & GET Requests Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### More on Express routing and GET requests\nIn this lesson we learned how Express methods can be used to define routes and handle GET requests made to a server created with Node and Express. \nFor more on Express routing methods and GET requests you can visit the ['Routing' guide](https://expressjs.com/en/guide/routing.html) in the Express documentation.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 860325,
          "key": "bfcd4972-22ff-47ff-9b2e-5453af288361",
          "title": "Routes & POST requests",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bfcd4972-22ff-47ff-9b2e-5453af288361",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 860297,
              "key": "1dfd6740-03f4-481a-a066-c6feb54d525b",
              "title": "Routes & POST requests Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Routes: POST Requests",
              "instructor_notes": ""
            },
            {
              "id": 860295,
              "key": "99b365ae-8084-4e63-be9e-dc0b6d8f0d49",
              "title": "Routes & POST intro",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "One way to collect and store user data so that you can access it later is through making an HTTP POST request.  Analogous to the `.get()` Express method, there is also a `.post()` method to handle HTTP POST requests. An HTTP POST request sends data to the project's endpoint, where it is stored and can be accessed through a GET request, which we covered in the last lesson. Here is what a simple POST request could look like using the Express method `.post()`:\n\n```\n// POST method route\napp.post('/', function (req, res) {\n  res.send('POST received')\n})\n```",
              "instructor_notes": ""
            },
            {
              "id": 860309,
              "key": "88d83465-bfa6-4de3-85d2-c2f602510764",
              "title": "ND#0001 C3 L3 A02 Routes And Post Requests",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "sCNt1N5duE0",
                "china_cdn_id": "sCNt1N5duE0.mp4"
              }
            },
            {
              "id": 900472,
              "key": "8f0ca951-098c-4305-8f5e-5d15fcfaf6a6",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is how you could setup a basic POST route in the server side code.\n\nFirst, Create an array to hold data:\n\n```\nconst data = []\n```\n\nThen, create `post()` with a url path and a callback function:\n\n```\napp.post('/addMovie', addMovie )\n```\n\nIn the callback function, add the data received from `request.body`. This is the key piece of information we are interested in from that long stretch of data we saw previously that the request (req) argument returns.\n\n```\nfunction addMovie (req, res){\n   console.log(req.body)\n   data.push(req.body)\n}\n```\n\nIn the next section we will cover how to execute this POST route with a request from the client side code.\n",
              "instructor_notes": ""
            },
            {
              "id": 860313,
              "key": "c9443a38-9a3e-4125-8563-d00118855724",
              "title": "Routes & POST requests Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "c9443a38-9a3e-4125-8563-d00118855724",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check all the following that are true about Express Routes and HTTP Requests",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Express routes are setup in the server code",
                    "is_correct": true
                  },
                  {
                    "id": "rbk2",
                    "text": "Express provides handlers that directly correspond to HTTP requests, such as GET and POST.",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "A GET request is used to save data to an app.",
                    "is_correct": false
                  },
                  {
                    "id": "rbk4",
                    "text": "GET and POST requests are used to retrieve and save data between APIs and servers.",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 860302,
              "key": "e59d22ee-38d9-4c8b-8b74-14d9d21cde83",
              "title": "Routes & POST requests Quiz 2",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "e59d22ee-38d9-4c8b-8b74-14d9d21cde83",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Write a post route for adding a favorite ice cream flavor via the path `’/flavor’` to an array named `data`.\n\n```\nconst data = [];\n// Complete the POST route started for you by adding the route as the first parameter below:\napp.post(_,addFlavor);\nfunction addFlavor(req,res){\n// And by adding the body of the request to the `data` array on the line below\n\n};\n```",
                "matchers": [
                  {
                    "expression": "const\\sdata\\s=\\s\\[\\]\\;(\\r\\n|\\r|\\n)app.post\\(('|\")\\/flavor('|\")\\,\\saddFlavor\\);(\\r\\n|\\r|\\n)(\\r\\n|\\r|\\n)function\\saddFlavor\\s?\\(req\\,\\sres\\)\\s?\\{(\\r\\n|\\r|\\n)\\s*data\\.push\\(req\\.body\\)\\;(\\r\\n|\\r|\\n)\\}\\;"
                  }
                ]
              }
            },
            {
              "id": 860314,
              "key": "125982f3-ccad-4437-8bf4-f0c663caca04",
              "title": "Routes & POST requests Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div id=\"spoiler_1\" style=\"display:none\">\n```\nconst data = [];\napp.post('/flavor', addFlavor);\n\nfunction addFlavor (req, res) {\n  data.push(req.body);\n};\n```\n</div>\n<button title=\"Click to show/hide content\" type=\"button\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}\">Show Solution</button>\n\nSo how do we actually activate our POST route, and how does it know what data to process? We will learn the answer to those questions in the next lesson, when we learn about connecting client and server code. So far we have just been working on the server side, but next we will learn how to POST and GET data from the browser.",
              "instructor_notes": ""
            },
            {
              "id": 909758,
              "key": "3bea32a3-d737-474a-b949-1accdcb0d2bc",
              "title": "Routes & POST requests Example Prep",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here is how you could setup a basic POST route in the server side code.\n\nFirst, Create an array to hold data:\n\n```\nconst data = []\n```\n\nThen, create `post()` with a url path and a callback function:\n\n```\napp.post('/addMovie', addMovie )\n```\n\nIn the callback function, add the data received from `request.body`. This is the key piece of information we are interested in from that long stretch of data we saw previously that the request (req) argument returns.\n\n```\nfunction addMovie (req, res){\n   console.log(req.body)\n   data.push(req.body)\n}\n```\n\nIn the next section we will cover how to execute this POST route with a request from the client side code.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 900377,
          "key": "7dcf87ba-4429-4fbc-badd-fadf6f1eaeab",
          "title": "Exercise: POST requests",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7dcf87ba-4429-4fbc-badd-fadf6f1eaeab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900636,
              "key": "8e44d130-a893-4b98-a349-9d05e37ea4db",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848937c900377xJUPYTERLi0hyvpp8",
              "pool_id": "jupyterlab",
              "view_id": "jupyter-lab-0ye39",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "5",
                    "pageStart": "5",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 860323,
          "key": "b231900f-1fab-4c7d-abad-6b16f5c384d6",
          "title": "Client Side, Server Side",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "b231900f-1fab-4c7d-abad-6b16f5c384d6",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 860299,
              "key": "a9c72a34-3df9-43e4-be09-17dba4c554ff",
              "title": "Client Side & Server Side Heading",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Understanding Server & Client Side Code",
              "instructor_notes": ""
            },
            {
              "id": 860301,
              "key": "79ea540f-550d-472c-bcc9-1987b0542f19",
              "title": "ND#0001 C3 L3 A03 Client Side & Server Side",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "u-44YvKvT0s",
                "china_cdn_id": "u-44YvKvT0s.mp4"
              }
            },
            {
              "id": 860307,
              "key": "dcd612b8-1921-4df9-aae3-f36a88afa721",
              "title": "Client Side & Server Side Example Prep",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Assuming we have set up a POST route in the file `server.js` file, we will move into the `website` folder and start writing client side code in a file named `app.js`. Here is the code we could use to make a POST request to our route:\n\n```\nconst postData = async ( url = '', data = {})=>{\n    console.log(data);\n      const response = await fetch(url, {\n      method: 'POST', \n      credentials: 'same-origin',\n      headers: {\n          'Content-Type': 'application/json',\n      },\n     // Body data type must match \"Content-Type\" header        \n      body: JSON.stringify(data), \n    });\n  \n      try {\n        const newData = await response.json();\n        console.log(newData);\n        return newData;\n      }catch(error) {\n      console.log(\"error\", error);\n      }\n  }\n\npostData('/add', {answer:42});\n```\n\nOn the next page is a screencast showing this in action.\n",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 899041,
          "key": "6fb46500-d444-4c8e-a988-b45a9a5931a4",
          "title": "Client Side & Server Side Example",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6fb46500-d444-4c8e-a988-b45a9a5931a4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 899038,
              "key": "dafff9f2-b0af-449e-8665-28533894faea",
              "title": "Client Side & Server Side Example Header",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Client Side & Server Side Example",
              "instructor_notes": ""
            },
            {
              "id": 860311,
              "key": "5ec5cd81-f508-48df-ba8d-31666eda6d77",
              "title": "ND#0001 C3 L3 A04 Client Side & Server Side Walkthrough",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "M6ADroAJlYU",
                "china_cdn_id": "M6ADroAJlYU.mp4"
              }
            },
            {
              "id": 860310,
              "key": "e760da54-62e3-4410-af28-77a32b56622b",
              "title": "Client Side & Server Side Example Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "\nLet's focus in on the actual POST request, which is an object passed as the second parameter to `fetch()`. The First parameter is the URL we want to make the POST request to. \n```\n {\n      method: 'POST', \n      credentials: 'same-origin',\n      headers: {\n          'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n }\n```\n\nThe credentials and headers are pretty boilerplate, but necessary for a successful POST request. The most important thing to notice is that `Content-Type` is set to json because we will be handling our data with JSON, for the most part.\n\nNow we get to the juicy parts: the `method` is set to `POST` because we are accessing the POST route we setup in `server.js`. If we wanted to make a `GET` request from the client side, the `method` would be `GET`. The `body` of the request is the part we are most interested in because this is how we will access the data on the server side. When sending data to a web server, the data has to be a string. We can convert a JavaScript object into a string using the JavaScript method `JSON.stringify()`, which turns JavaScript objects and JSON data into a string for our server to receive the information. In this example, we are turning the JavaScript object passed in the `data` parameter into a string.",
              "instructor_notes": ""
            },
            {
              "id": 860317,
              "key": "ff42bf95-9ffe-46fa-a623-e5f9a0ac10b6",
              "title": "Client Side & Server Side Quiz",
              "semantic_type": "CheckboxQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "ff42bf95-9ffe-46fa-a623-e5f9a0ac10b6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Check all that are true about server side and client side programming:",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "Server code and client side code belong in the same file",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "Server code and client side code belong in separate files at different levels of your project hierarchy\non the browser",
                    "is_correct": true
                  },
                  {
                    "id": "rbk3",
                    "text": "A route created on the server side can be accessed through a GET or POST request made on the client side",
                    "is_correct": true
                  },
                  {
                    "id": "rbk4",
                    "text": "Server code manages routing of data separate from the browser",
                    "is_correct": true
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 900379,
          "key": "4a848ecc-8179-42f3-acc2-053055016aaf",
          "title": "Exercise: Client Side & Server Side",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "4a848ecc-8179-42f3-acc2-053055016aaf",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 900637,
              "key": "1d17fd25-1201-487a-8027-ac36da27c974",
              "title": null,
              "semantic_type": "WorkspaceAtom",
              "is_public": true,
              "workspace_id": "r848937c900379xJUPYTERLd1n4tfda",
              "pool_id": "jupyterlab",
              "view_id": "jupyter-lab-lxuoc",
              "gpu_capable": false,
              "configuration": {
                "id": "reserved",
                "blueprint": {
                  "conf": {
                    "disk": null,
                    "port": 3000,
                    "ports": [],
                    "pageEnd": "6",
                    "pageStart": "6",
                    "allowSubmit": false,
                    "defaultPath": "/",
                    "actionButtonText": ""
                  },
                  "kind": "jupyter-lab"
                },
                "workspaceId": "reserved"
              },
              "starter_files": null
            }
          ]
        },
        {
          "id": 899039,
          "key": "0fc174bc-2ecd-45dd-b8d5-5b339bd64f31",
          "title": "Processing the POST request",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "0fc174bc-2ecd-45dd-b8d5-5b339bd64f31",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 860304,
              "key": "7b5218db-3f16-4581-9b0b-685c2aba286f",
              "title": "Client Side & Server Side+",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "# Processing the POST request\n\nSo now that we know how to send a POST request from the client side, let's return to the server code and learn how to process the data we receive with our POST request. Remember, the last line of code in our previous example called our `postData` function, passing in the URL of the POST route, and an object containing the data to be posted. That line of code looked like this:\n`postData('/add', {answer:42})`",
              "instructor_notes": ""
            },
            {
              "id": 860320,
              "key": "e3d76493-3e32-4d5f-a997-98314131aacd",
              "title": "Example prep",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Back on the server side code we should now be able to receive the data `answer:42`. Remember in the last example, we attached our data to the `body` of our POST request, so to receive that data and make it actionable we can use `request.body`.",
              "instructor_notes": ""
            },
            {
              "id": 860308,
              "key": "16fa687d-0bbd-4d17-81e2-d36143bd1979",
              "title": "Example",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": " Here is an example where we set a variable named `data` to hold the value of `request.body`, and then print `data` to see what we received.\n```\napp.post('/add', function (request, response) {\n    let data = request.body;\n    console.log(data);\n});\n```\nThe output of this would display in ther terminal:\n`{answer:42}`",
              "instructor_notes": ""
            },
            {
              "id": 860319,
              "key": "e168c90c-812c-44fe-af60-6450e9292a83",
              "title": "Next Step",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "But we don't just want to see the data we received, to complete our POST request we must assign the data we received to our project endpoint, the JS object in our server code named `projectData`. We can simply make a new entry in our JS object using the syntax:\n\n`projectData[\"x\"] = y`\n\nThis code would create a new entry in our JS object API endpoint where the value of a string `\"x\"` is `y`. So if the data received from the POST request was `{intelligence:100}`, we could create a new entry in our endpoint with the code:\n`    let data = request.body;\n    projectData[\"intelligence\"]= data.intelligence;   `\n\nNotice that we manually set the string for the key of the new JS object entry as `\"intelligence\"`, and then to access the property we want to set as its value we use `data.intelligence`. For more on JS dot notation see [the MDN Web Docs entry on Property accessors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_accessors).\n",
              "instructor_notes": ""
            },
            {
              "id": 860321,
              "key": "a54efffe-3dd3-4693-9456-3e72774b70d4",
              "title": "Client Side & Server Side Problem Set",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "a54efffe-3dd3-4693-9456-3e72774b70d4",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "```\nconst data = [{animal:\"elephant\", score: 10},{animal:\"kangaroo\",score:3}]\n\nfunction makeData(request){\n   \n}\n\nmakeData({body:{animal:\"turtle\", score:7}})\n```\nGiven the above code, which code block inside the function`makeData` would correctly use the input data to add a new JS object to the `data` array, following the same structure as the entries already present?\n",
                "answers": [
                  {
                    "id": "rbk1",
                    "text": "```\nlet newData = request;\nlet newEntry =     \n    animal: newData.animal,\n    score: newData.score\ndata.push(newEntry)\n\n```",
                    "is_correct": false
                  },
                  {
                    "id": "rbk2",
                    "text": "```\nlet newData = request.body;\nlet newEntry = {\n    animal: newData.animal,\n    score: newData.score\n    }    \ndata.push(newEntry)\n```",
                    "is_correct": true
                  }
                ]
              }
            },
            {
              "id": 860312,
              "key": "154d2e75-0ca3-4d8b-aa10-871ad2515788",
              "title": "Client Side & Server Side Problem Set",
              "semantic_type": "ValidatedQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "154d2e75-0ca3-4d8b-aa10-871ad2515788",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "Let's say there's a client side POST request written in a function, `postData()`. Assume `postData()` sent a POST request to your server with the data: `{answer:42}`. Complete the following server side code to add the body of the request directly to the project endpoint, named `projectData`.\n```\n...\nprojectData = [];\napp.post('/add', function(request, response){\n  // Your code goes here   \n}) \n```",
                "matchers": [
                  {
                    "expression": "projectData\\.push\\(request\\.body\\)\\;"
                  }
                ]
              }
            },
            {
              "id": 860322,
              "key": "e7815136-3142-46d9-83ea-840fcb2a0448",
              "title": "Client Side & Server Side Summary",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div id=\"spoiler_1\" style=\"display:none\">\n```\nprojectData.push(request.body);\n```\n</div>\n<button title=\"Click to show/hide content\" type=\"button\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}\">Show Solution</button>\n\nIn this lesson we have learned how server side and client side code work together to route data through a web app. We learned how to setup a POST request in the server side code, and then execute a POST request via that path on the client side code. We also covered how to structure and add POST request data to a project API endpoint. In the next lesson we will learn more about asynchronous functions in JavaScript and you will learn more in depth about some of the syntax used in these demos, including `async`, `await`, `try`,  and `catch` .",
              "instructor_notes": ""
            },
            {
              "id": 860318,
              "key": "5baba0a8-8e01-4115-a32b-3e84272ca444",
              "title": "Client Side & Server Side Further Research",
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "For more details on server side and client side programming see this [Stack Overflow post](https://stackoverflow.com/questions/1404376/what-is-client-side-javascript-and-what-is-server-side-javascript).",
              "instructor_notes": ""
            }
          ]
        }
      ]
    }
  },
  "_deprecated": [
    {
      "name": "non_google_url",
      "reason": "(2016/8/18) Not sure, ask i18n team for reason"
    }
  ]
}