{
  "data": {
    "lesson": {
      "id": 194594,
      "key": "42383e89-ac6a-491a-b7d0-198851287bbe",
      "title": "Syntax",
      "semantic_type": "Lesson",
      "is_public": true,
      "version": "1.0.0",
      "locale": "en-us",
      "summary": "With this major update to the JavaScript language, a number of syntax improvements have been added. In this lesson, you'll learn to improve your JavaScript code with these syntax updates.",
      "lesson_type": "Classroom",
      "display_workspace_project_only": null,
      "resources": {
        "files": [
          {
            "name": "Videos Zip File",
            "uri": "https://zips.udacity-data.com/42383e89-ac6a-491a-b7d0-198851287bbe/194594/1545067640588/Syntax+Videos.zip"
          },
          {
            "name": "Transcripts Zip File",
            "uri": "https://zips.udacity-data.com/42383e89-ac6a-491a-b7d0-198851287bbe/194594/1545067637788/Syntax+Subtitles.zip"
          }
        ],
        "google_plus_link": null,
        "career_resource_center_link": null,
        "coaching_appointments_link": null,
        "office_hours_link": null,
        "aws_provisioning_link": null
      },
      "project": null,
      "lab": null,
      "concepts": [
        {
          "id": 196653,
          "key": "08a224ff-d7f5-4086-ab89-f74d3da09d08",
          "title": "Harmony, ES6, ES2015...",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "08a224ff-d7f5-4086-ab89-f74d3da09d08",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232928,
              "key": "84fb6542-2f14-41ce-a76f-9f07d32055eb",
              "title": "Harmony, ES6, ES2015...",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "DDxsC03d_KU",
                "china_cdn_id": "DDxsC03d_KU.mp4"
              }
            },
            {
              "id": 282725,
              "key": "2c384e9a-a61f-43ca-a6be-1a3536fbae00",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Welcome to the course on ES6! We're glad you're here! üëãüèº\n\nThis course is all about the new changes brought to the JavaScript programming language. We're expecting that you've worked with JavaScript for a couple of years and have an intermediate level of experience with the language.\n\nIf you're new to the JavaScript language or would like a refresher, check out our [Intro to JavaScript course](https://www.udacity.com/course/intro-to-javascript--ud803). \n\nFollow us!\n\n* [@parkesrjames](https://twitter.com/parkesrjames)\n* [@richardkalehoff](https://twitter.com/richardkalehoff)",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 196655,
          "key": "5192ff97-3950-4db7-bb7b-0020a61d1d87",
          "title": "Let and Const",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "5192ff97-3950-4db7-bb7b-0020a61d1d87",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 196657,
              "key": "8b077400-8fba-4a76-bb44-6100f58fb81a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "There are now two new ways to declare variables in JavaScript: **let** and **const**.\n\nUp until now, the only way to declare a variable in JavaScript was to use the keyword `var`. To understand why `let` and `const` were added, it‚Äôs probably best to look at an example of when using `var` can get us into trouble.\n\nTake a look at the following code.",
              "instructor_notes": ""
            },
            {
              "id": 196662,
              "key": "96e51860-673c-48ee-aec8-e454e316137f",
              "title": "Hoisted to the Top",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "96e51860-673c-48ee-aec8-e454e316137f",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you expect to be the output from running `getClothing(false)`?\n\n```js\nfunction getClothing(isCold) {\n  if (isCold) {\n    var freezing = 'Grab a jacket!';\n  } else {\n    var hot = 'It‚Äôs a shorts kind of day.';\n    console.log(freezing);\n  }\n}\n```",
                "answers": [
                  {
                    "id": "a1476810114376",
                    "text": "ReferenceError: freezing is not defined",
                    "is_correct": false
                  },
                  {
                    "id": "a1476810147102",
                    "text": "Grab a jacket!",
                    "is_correct": false
                  },
                  {
                    "id": "a1476810147734",
                    "text": "undefined",
                    "is_correct": true
                  },
                  {
                    "id": "a1476810148238",
                    "text": "It's a shorts kind of day.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 196663,
              "key": "11f8c6bf-dcfb-411d-acf8-4c2ac0aa181d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Hoisting\n\nHoisting is a result of how JavaScript is interpreted by your browser. Essentially, before any JavaScript code is executed, all variables declared with `var` are \"hoisted\", which means they're raised to the top of the function scope. So at run-time, the `getClothing()` function actually looks more like this‚Ä¶",
              "instructor_notes": ""
            },
            {
              "id": 197121,
              "key": "24f6e2ab-2cf7-4070-804d-200042b4ab64",
              "title": "Hoisting Animation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">Before the function is executed, all variables are hoisted to the top of the function scope. So what‚Äôs our solution?</div>",
              "video": {
                "youtube_id": "znkyiX50Ehk",
                "china_cdn_id": "znkyiX50Ehk.mp4"
              }
            },
            {
              "id": 197122,
              "key": "8980baa4-1cbc-43a6-9579-185f85e5110f",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## let and const\n\nVariables declared with `let` and `const` eliminate this specific issue of hoisting because they‚Äôre scoped **to the block**, not to the function. Previously, when you used `var`, variables were either scoped _globally_ or _locally_ to an entire function scope.\n\nIf a variable is declared using `let` or `const` inside a block of code (denoted by curly braces `{ }`), then the variable is stuck in what is known as the **temporal dead zone** until the variable‚Äôs declaration is processed. This behavior prevents variables from being accessed only until after they‚Äôve been declared.",
              "instructor_notes": ""
            },
            {
              "id": 257733,
              "key": "29f1f9a0-51a0-420f-90f8-862b5622da9d",
              "title": "Block Scoped",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">Variables declared with `let` and `const` are only available within the block they're declared.</div>",
              "video": {
                "youtube_id": "tQ02WllxScU",
                "china_cdn_id": "tQ02WllxScU.mp4"
              }
            },
            {
              "id": 196695,
              "key": "64fe4688-746a-4c02-a405-a3823fa4d25e",
              "title": "Temporal Dead Zone",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "64fe4688-746a-4c02-a405-a3823fa4d25e",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you expect to be the output from running `getClothing(false)`?\n\n```js\nfunction getClothing(isCold) {\n  if (isCold) {\n    const freezing = 'Grab a jacket!';\n  } else {\n    const hot = 'It‚Äôs a shorts kind of day.';\n    console.log(freezing);\n  }\n}\n```",
                "answers": [
                  {
                    "id": "a1476822686695",
                    "text": "ReferenceError: freezing is not defined",
                    "is_correct": true
                  },
                  {
                    "id": "a1480375649190",
                    "text": "Grab a jacket!",
                    "is_correct": false
                  },
                  {
                    "id": "a1480375649839",
                    "text": "undefined",
                    "is_correct": false
                  },
                  {
                    "id": "a1480375650358",
                    "text": "It's a shorts kind of day.",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 196696,
              "key": "eff67b79-32b7-4059-9307-50070d5d34bd",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Rules for using let and const\n\n`let` and `const` also have some other interesting properties.\n\n* Variables declared with `let` can be reassigned, but can‚Äôt be redeclared in the same scope.\n* Variables declared with `const` must be assigned an initial value, but can‚Äôt be redeclared in the same scope, and can‚Äôt be reassigned.",
              "instructor_notes": ""
            },
            {
              "id": 196697,
              "key": "3b1fd374-123e-4025-948c-03ca1b81dd8d",
              "title": "Assignment with Let",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "3b1fd374-123e-4025-948c-03ca1b81dd8d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you expect to be output from running the following code?\n\n```js\nlet instructor = 'James';\ninstructor = 'Richard';\nconsole.log(instructor);\n```",
                "answers": [
                  {
                    "id": "a1476822752527",
                    "text": "James",
                    "is_correct": false
                  },
                  {
                    "id": "a1476822765910",
                    "text": "Richard",
                    "is_correct": true
                  },
                  {
                    "id": "a1476822769046",
                    "text": "undefined",
                    "is_correct": false
                  },
                  {
                    "id": "a1480379378224",
                    "text": "SyntaxError: Identifier 'instructor' has already been declared",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 217364,
              "key": "e1303197-579e-4118-98e4-fcb1691f3ea2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Use cases\n\nThe big question is when should you use `let` and `const`? The general rule of thumb is as follows:\n\n* use `let` when you plan to reassign new values to a variable, and\n* use `const` when you don‚Äôt plan on reassigning new values to a variable.\n\nSince `const` is the strictest way to declare a variable, we suggest that you always declare variables with `const` because it'll make your code easier to reason about since you know the identifiers won't change throughout the lifetime of your program. If you find that you need to update a variable or change it, then go back and switch it from `const` to `let`.\n\nThat‚Äôs pretty straightforward, right? But what about `var`?\n\n## What about var?\n\nIs there any reason to use `var` anymore? _Not really_.\n\nThere are some arguments that can be made for using `var` in situations where you want to globally define variables, but this is often considered bad practice and should be avoided. From now on, we suggest ditching `var` in place of using `let` and `const`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 217351,
          "key": "7c8e752b-d552-4bad-ad3f-0f5f263d5dc9",
          "title": "Quiz: Using Let and Const (1-1)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c8e752b-d552-4bad-ad3f-0f5f263d5dc9",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217374,
              "key": "b2f4f888-c8d3-4e67-bc3f-32ddb0d99e79",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nReplace the variable declarations using `let` or `const`.\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 217367,
              "key": "0a34f90c-e16e-47b8-854d-8755736f4336",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "0a34f90c-e16e-47b8-854d-8755736f4336",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5739721881944064",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Using Let and Const (1-1)\n */\n\nvar CHARACTER_LIMIT = 255;\nvar posts = [\n\t\"#DeepLearning transforms everything from self-driving cars to language translations. AND it's our new Nanodegree!\",\n\t\"Within your first week of the VR Developer Nanodegree Program, you'll make your own virtual reality app\",\n\t\"I just finished @udacity's Front-End Web Developer Nanodegree. Check it out!\"\n];\n\n// prints posts to the console\nfunction displayPosts() {\n\tfor (var i = 0; i < posts.length; i++) {\n\t\tconsole.log(posts[i].slice(0, CHARACTER_LIMIT));\n\t}\n}\n\ndisplayPosts();\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 196686,
          "key": "df4360db-645e-428c-a6bd-3650eab1a13d",
          "title": "Template Literals",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "df4360db-645e-428c-a6bd-3650eab1a13d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 196687,
              "key": "a6c9cea7-84d4-4749-93dc-0b2ad2ed7c8d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Prior to ES6, the old way to concatenate strings together was by using the string concatenation operator ( `+` ).\n\n```js\nconst student = {\n  name: 'Richard Kalehoff',\n  guardian: 'Mr. Kalehoff'\n};\n\nconst teacher = {\n  name: 'Mrs. Wilson',\n  room: 'N231'\n}\n\nlet message = student.name + ' please see ' + teacher.name + ' in ' + teacher.room + ' to pick up your report card.';\n```\n> **Returns:** Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.\n\nThis works alright, but it gets more complicated when you need to build multi-line strings.\n\n```js\nlet note = teacher.name + ',\\n\\n' +\n  'Please excuse ' + student.name + '.\\n' +\n  'He is recovering from the flu.\\n\\n' +\n  'Thank you,\\n' +\n  student.guardian;\n```\n> **Returns:**<br>\nMrs. Wilson,\n\n> Please excuse Richard Kalehoff.<br>\nHe is recovering from the flu.\n\n> Thank you,<br>\nMr. Kalehoff\n\nHowever, that‚Äôs changed with the introduction of _template literals_ (previously referred to as \"template strings\" in development releases of ES6).\n\n> **NOTE:** As an alternative to using the string concatenation operator ( `+` ), you can use the String's `concat()` method, but both options are rather clunky for simulating true [string interpolation](https://en.wikipedia.org/wiki/String_interpolation).\n\n## Template Literals\n\n**Template literals** are essentially string literals that include embedded expressions.\n\nDenoted with backticks (&#96; &#96;) instead of single quotes ( `''` ) or double quotes ( `\"\"` ), template literals can contain placeholders which are represented using `${expression}`. This makes it _much easier_ to build strings.\n\nHere's the previous examples using template literals.\n\n```js\nlet message = `${student.name} please see ${teacher.name} in ${teacher.room} to pick up your report card.`;\n```\n> **Returns:** Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.\n\nBy using template literals, you can drop the quotes along with the string concatenation operator. Also, you can reference the object's properties inside expressions.\n\nHere, you try. Change the `greeting` string below to use a template literal. Also, feel free to swap in your name for the placeholder.",
              "instructor_notes": ""
            },
            {
              "id": 217450,
              "key": "d83210ed-bbdf-46ff-ae01-04ba94b6e61d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "d83210ed-bbdf-46ff-ae01-04ba94b6e61d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5349265062887424",
                "initial_code_files": [
                  {
                    "text": "/*\n * Instructions: Change the `greeting` string to use a template literal.\n */\n\nconst myName = '[NAME]';\nconst greeting = 'Hello, my name is ' + myName;\nconsole.log(greeting);\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 217449,
              "key": "dcdfb86c-cbd2-42c4-a556-4b5fa85c226c",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "...but what about the multi-line example from before?",
              "instructor_notes": ""
            },
            {
              "id": 197646,
              "key": "3344b7cc-2431-43f1-a782-a7aa14a328c5",
              "title": "Template Literals",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">This silent animation shows how template literals make multi-line strings easier to read and more concise.<br><br>This video does not have audio. It was created as a visual to aid learning.</div>",
              "video": {
                "youtube_id": "fTWnGsGlmrM",
                "china_cdn_id": "fTWnGsGlmrM.mp4"
              }
            },
            {
              "id": 197645,
              "key": "c3c8c52b-f970-46b2-8de3-12e70481079d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Here‚Äôs where template literals really shine. In the code animation above, the quotes and string concatenation operator have been dropped, as well as the newline characters ( `\\n` ). That's because template literals also preserve newlines as part of the string!\n\n> **TIP:** Embedded expressions inside template literals can do more than just reference variables. You can perform operations, call functions and use loops inside embedded expressions!",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 217366,
          "key": "d652189e-a8af-4bd9-8fcd-aab3587e4d86",
          "title": "Quiz: Build an HTML Fragment (1-2)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "d652189e-a8af-4bd9-8fcd-aab3587e4d86",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217375,
              "key": "c6f840f8-7644-40eb-b273-59448b7229df",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nModify the `createAnimalTradingCardHTML()` function to use a template literal for `cardHTML`.\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 217368,
              "key": "968596a8-c9ba-48b0-afb2-d951c7750c68",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "968596a8-c9ba-48b0-afb2-d951c7750c68",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5118760878997504",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Build an HTML Fragment (1-2)\n */\n\nconst cheetah = {\n    name: 'Cheetah',\n    scientificName: 'Acinonyx jubatus',\n    lifespan: '10-12 years',\n    speed: '68-75 mph',\n    diet: 'carnivore',\n    summary: 'Fastest mammal on land, the cheetah can reach speeds of 60 or perhaps even 70 miles (97 or 113 kilometers) an hour over short distances. It usually chases its prey at only about half that speed, however. After a chase, a cheetah needs half an hour to catch its breath before it can eat.',\n    fact: 'Cheetahs have ‚Äútear marks‚Äù that run from the inside corners of their eyes down to the outside edges of their mouth.'\n};\n\n// creates an animal trading card\nfunction createAnimalTradingCardHTML(animal) {\n    const cardHTML = '<div class=\"card\">' +\n        '<h3 class=\"name\">' + animal.name + '</h3>' +\n        '<img src=\"' + animal.name + '.jpg\" alt=\"' + animal.name +'\" class=\"picture\">' +\n        '<div class=\"description\">' +\n            '<p class=\"fact\">' + animal.fact + '</p>' +\n            '<ul class=\"details\">' +\n                '<li><span class=\"bold\">Scientific Name</span>: ' + animal.scientificName + '</li>' +\n                '<li><span class=\"bold\">Average Lifespan</span>: ' + animal.lifespan + '</li>' +\n                '<li><span class=\"bold\">Average Speed</span>: ' + animal.speed + '</li>' +\n                '<li><span class=\"bold\">Diet</span>: ' + animal.diet + '</li>' +\n            '</ul>' +\n            '<p class=\"brief\">' + animal.summary + '</p>' +\n        '</div>' +\n    '</div>';\n\n    return cardHTML;\n}\n\nconsole.log(createAnimalTradingCardHTML(cheetah));\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 196688,
          "key": "7c7be588-31e9-4c62-9dad-ecf23f943b19",
          "title": "Destructuring",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "7c7be588-31e9-4c62-9dad-ecf23f943b19",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 196690,
              "key": "94d1089c-435e-4b4e-8cb4-de220cd8551a",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "In ES6, you can extract data from arrays and objects into distinct variables using _destructuring_.\n\nThis probably sounds like something you‚Äôve done before, for example, look at the two code snippets below that extract data using pre-ES6 techniques:\n\n```js\nconst point = [10, 25, -34];\n\nconst x = point[0];\nconst y = point[1];\nconst z = point[2];\n\nconsole.log(x, y, z);\n```\n> **Prints:** 10 25 -34\n\nThe example above shows extracting values from an array.\n\n```js\nconst gemstone = {\n  type: 'quartz',\n  color: 'rose',\n  carat: 21.29\n};\n\nconst type = gemstone.type;\nconst color = gemstone.color;\nconst carat = gemstone.carat;\n\nconsole.log(type, color, carat);\n```\n> **Prints:** quartz rose 21.29\n\nAnd this example shows extracting values from an object.\n\nBoth are pretty straightforward, however, neither of these examples are actually using destructuring.\n\nSo what exactly is _destructuring_?\n\n## Destructuring\n\n**Destructuring** borrows inspiration from languages like [Perl](https://en.wikipedia.org/wiki/Perl) and [Python](https://en.wikipedia.org/wiki/Python_%28programming_language%29) by allowing you to specify the elements you want to extract from an array or object _on the left side of an assignment_. It sounds a little weird, but you can actually achieve the same result as before, but with much less code; and it's still easy to understand.\n\nLet‚Äôs take a look at both examples rewritten using destructuring.\n\n### Destructuring values from an array\n\n```js\nconst point = [10, 25, -34];\n\nconst [x, y, z] = point;\n\nconsole.log(x, y, z);\n```\n> **Prints:** 10 25 -34\n\nIn this example, the brackets `[ ]` represent the array being destructured and `x`, `y`, and `z` represent the variables where you want to store the values from the array. Notice how you don‚Äôt have to specify the indexes for where to extract the values from because the indexes are implied.\n\n> **TIP:** You can also ignore values when destructuring arrays. For example, `const [x, , z] = point;` ignores the `y` coordinate and discards it.",
              "instructor_notes": ""
            },
            {
              "id": 196693,
              "key": "27de1699-3be6-4421-bde8-3f7f6bc5bbea",
              "title": "Array Destructuring",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "27de1699-3be6-4421-bde8-3f7f6bc5bbea",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you expect to be the value of `second` after running the following code?\n\n```js\nlet positions = ['Gabrielle', 'Jarrod', 'Kate', 'Fernando', 'Mike', 'Walter'];\nlet [first, second, third] = positions;\n```",
                "answers": [
                  {
                    "id": "a1476821337291",
                    "text": "Kate",
                    "is_correct": false
                  },
                  {
                    "id": "a1484766137661",
                    "text": "Gabrielle",
                    "is_correct": false
                  },
                  {
                    "id": "a1484766138270",
                    "text": "Jarrod",
                    "is_correct": true
                  },
                  {
                    "id": "a1484766138998",
                    "text": "Walter",
                    "is_correct": false
                  }
                ]
              }
            },
            {
              "id": 217378,
              "key": "37884397-7de8-4ab6-9645-f07d67f742ed",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Destructuring values from an object\n\n```js\nconst gemstone = {\n  type: 'quartz',\n  color: 'rose',\n  carat: 21.29\n};\n\nconst {type, color, carat} = gemstone;\n\nconsole.log(type, color, carat);\n```\n> **Prints:** quartz rose 21.29\n\nIn this example, the curly braces `{ }` represent the object being destructured and `type`, `color`, and `carat` represent the variables where you want to store the properties from the object. Notice how you don‚Äôt have to specify the property from where to extract the values. Because `gemstone` has a property named `type`, the value is automatically stored in the `type` variable. Similarly, `gemstone` has a `color` property, so the value of `color` automatically gets stored in the `color` variable. And it's the same with `carat`.\n\n> **TIP:** You can also specify the values you want to select when destructuring an object. For example, `let {color} = gemstone;` will only select the `color` property from the `gemstone` object.",
              "instructor_notes": ""
            },
            {
              "id": 217379,
              "key": "feaf1cb3-6f3c-45c4-b262-6f3bd19dc043",
              "title": "Test",
              "semantic_type": "RadioQuizAtom",
              "is_public": true,
              "instructor_notes": null,
              "user_state": {
                "node_key": "feaf1cb3-6f3c-45c4-b262-6f3bd19dc043",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "question": {
                "prompt": "What do you expect to be returned from calling `getArea()`?\n\n```js\nconst circle = {\n  radius: 10,\n  color: 'orange',\n  getArea: function() {\n    return Math.PI * this.radius * this.radius;\n  },\n  getCircumference: function() {\n    return 2 * Math.PI * this.radius;\n  }\n};\n\nlet {radius, getArea, getCircumference} = circle;\n```",
                "answers": [
                  {
                    "id": "a1480387546709",
                    "text": "314.1592653589793",
                    "is_correct": false
                  },
                  {
                    "id": "a1484774013273",
                    "text": "NaN",
                    "is_correct": true
                  },
                  {
                    "id": "a1484774013889",
                    "text": "62.83185307179586",
                    "is_correct": false
                  },
                  {
                    "id": "a1484774014457",
                    "text": "pie",
                    "is_correct": false
                  }
                ]
              }
            }
          ]
        },
        {
          "id": 217370,
          "key": "e387e1b2-e233-4740-ab60-c231c7926808",
          "title": "Quiz: Destructuring Arrays (1-3)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "e387e1b2-e233-4740-ab60-c231c7926808",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 217376,
              "key": "9e22f1c2-3db7-4a4a-85e6-5f160b4bc023",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nUse array destructuring to pull out the three **colors** from the array of `things` and store them into the variables `one`, `two`, and `three`.\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 217372,
              "key": "745ec3ae-792e-4538-8a61-5ffc6e10460d",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "745ec3ae-792e-4538-8a61-5ffc6e10460d",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5833150037098496",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Destructuring Arrays (1-3)\n *\n * Use destructuring to initialize the variables `one`, `two`, and `three`\n * with the colors from the `things` array.\n */\n\nconst things = ['red', 'basketball', 'paperclip', 'green', 'computer', 'earth', 'udacity', 'blue', 'dogs'];\n\nconst one = things;\nconst two = '';\nconst three = '';\n\nconst colors = `List of Colors\n1. ${one}\n2. ${two}\n3. ${three}`;\n\nconsole.log(colors);\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 909633,
              "key": "182a0475-26cb-4a4b-92b0-b2a52922cecc",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div id=\"spoiler_1\" style=\"display:none\">\n```\nconst [one, , , two, , , , three] = things;\n```\n</div>\n<button title=\"Click to show/hide content\" type=\"button\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}\">Show Solution</button>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 196689,
          "key": "3f34fe2c-c535-4d9d-bceb-89dcd8f50254",
          "title": "Object Literal Shorthand",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "3f34fe2c-c535-4d9d-bceb-89dcd8f50254",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 196691,
              "key": "da0a6e70-bb6d-498b-9a9f-0b02aa3a9b94",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "A recurring trend in ES6 is to remove unnecessary repetition in your code. By removing unnecessary repetition, your code becomes easier to read and more concise. This trend continues with the introduction of new _shorthand_ ways for initializing objects and adding methods to objects.\n\nLet‚Äôs see what those look like.\n\n## Object literal shorthand\n\nYou‚Äôve probably written code where an object is being initialized using the same property names as the variable names being assigned to them.\n\nBut just in case you haven‚Äôt, here‚Äôs an example.\n\n```js\nlet type = 'quartz';\nlet color = 'rose';\nlet carat = 21.29;\n\nconst gemstone = {\n  type: type,\n  color: color,\n  carat: carat\n};\n\nconsole.log(gemstone);\n```\n> **Prints:** Object {type: \"quartz\", color: \"rose\", carat: 21.29}\n\nDo you see the repetition? Doesn't `type: type`, `color: color`, and `carat:carat` seem redundant?\n\nThe good news is that you can remove those duplicate variables names from object properties _if_ the properties have the same name as the variables being assigned to them.\n\nCheck it out!",
              "instructor_notes": ""
            },
            {
              "id": 197648,
              "key": "7c97416e-495e-4b42-9b54-9fc8588e3047",
              "title": "Object Literal Shorthand",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">If object properties have the same name as the variables being assigned to them, then you can drop the duplicate variable names.<br><br>This video does not have audio. It was created as a visual to aid learning.\n</div>",
              "video": {
                "youtube_id": "HF0PN1vHsSY",
                "china_cdn_id": "HF0PN1vHsSY.mp4"
              }
            },
            {
              "id": 257769,
              "key": "b0f0a8a1-d65f-472f-9231-6e084a632c19",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Speaking of shorthand, there‚Äôs also a shorthand way to add methods to objects.\n\nTo see how that looks, let‚Äôs start by adding a `calculateWorth()` method to our `gemstone` object. The `calculateWorth()` method will tell us how much our gemstone costs based on its `type`, `color`, and `carat`.\n\n```js\nlet type = 'quartz';\nlet color = 'rose';\nlet carat = 21.29;\n\nconst gemstone = {\n  type,\n  color,\n  carat,\n  calculateWorth: function() {\n    // will calculate worth of gemstone based on type, color, and carat\n  }\n};\n```\n\nIn this example, an anonymous function is being assigned to the property `calculateWorth`, but is the **function** keyword _really_ needed? In ES6, it‚Äôs not!\n\n## Shorthand method names\n\nSince you only need to reference the gemstone‚Äôs `calculateWorth` property in order to call the function, having the function keyword is redundant, so it can be dropped.\n\n```js\nlet gemstone = {\n  type,\n  color,\n  carat,\n  calculateWorth() { ... }\n};\n```",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 196730,
          "key": "01c56ec4-634b-4b23-8a41-2fe44acea013",
          "title": "Lesson 1 Checkup",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "01c56ec4-634b-4b23-8a41-2fe44acea013",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 218168,
              "key": "6383e48d-0b8c-4584-b6f7-55d7c4824671",
              "title": "Lesson 1 Checkup",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "6wcZNHqmGuc",
                "china_cdn_id": "6wcZNHqmGuc.mp4"
              }
            }
          ]
        },
        {
          "id": 196733,
          "key": "c48f069c-9de8-4dc4-ab3a-44036400a02d",
          "title": "Iteration",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "c48f069c-9de8-4dc4-ab3a-44036400a02d",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 412436,
              "key": "230f13b1-4a7a-435d-aa8a-187a8b11b63c",
              "title": "Iteration",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "Xsc9fRxOw5o",
                "china_cdn_id": "Xsc9fRxOw5o.mp4"
              }
            }
          ]
        },
        {
          "id": 196703,
          "key": "1b26c80a-00b2-4b3d-a354-c665807e6dda",
          "title": "Family of For Loops",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "1b26c80a-00b2-4b3d-a354-c665807e6dda",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 196737,
              "key": "c8c6ed8a-429e-45af-a338-0b544c3f4cf3",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "The **for...of loop** is the most recent addition to the family of for loops in JavaScript.\n\nIt combines the strengths of its siblings, the **for loop** and the **for...in loop**, to loop over any type of data that is **iterable** (meaning it follows the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) which we'll look at in lesson 3). By default, this includes the data types String, Array, Map, and Set‚Äînotably absent from this list is the `Object` data type (i.e. `{}`). Objects are not iterable, by default.\n\nBefore we look at the for...of loop, let‚Äôs first take a quick look at the other for loops to see where they have weaknesses.\n\n## The for loop\n\nThe for loop is obviously the most common type of loop there is, so this should be a quick refresher.\n\n```js\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (let i = 0; i < digits.length; i++) {\n  console.log(digits[i]);\n}\n```\n> **Prints:**<br>\n0<br>\n1<br>\n2<br>\n3<br>\n4<br>\n5<br>\n6<br>\n7<br>\n8<br> \n9\n\nReally the biggest downside of a for loop is having to keep track of **the counter** and **exit condition**.\n\nIn this example, we‚Äôre using the variable `i` as a counter to keep track of the loop and to access values in the array. We‚Äôre also using `digits.length` to determine the exit condition for the loop. If you just glance at this code, it can sometimes be confusing exactly what‚Äôs happening; especially for beginners.\n\nWhile for loops certainly have an advantage when looping through arrays, some data is not structured like an array, so a for loop isn‚Äôt always an option.\n\n## The for...in loop\n\nThe for...in loop improves upon the weaknesses of the for loop by eliminating the counting logic and exit condition. \n\n```js\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const index in digits) {\n  console.log(digits[index]);\n}\n```\n> **Prints:**<br>\n0<br>\n1<br>\n2<br>\n3<br>\n4<br>\n5<br>\n6<br>\n7<br>\n8<br> \n9\n\nBut, you still have to deal with the issue of using an **index** to access the values of the array, and that stinks; it almost makes it more confusing than before.\n\nAlso, the for...in loop can get you into big trouble when you need to add an extra method to an array (or another object). Because for...in loops loop over all enumerable properties, this means if you add any additional properties to the array's prototype, then those properties will also appear in the loop.\n\n```js\nArray.prototype.decimalfy = function() {\n  for (let i = 0; i < this.length; i++) {\n    this[i] = this[i].toFixed(2);\n  }\n};\n\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const index in digits) {\n  console.log(digits[index]);\n}\n```\n> **Prints:**<br>\n0<br>\n1<br>\n2<br>\n3<br>\n4<br>\n5<br>\n6<br>\n7<br>\n8<br> \n9<br>\nfunction() {<br>\n&emsp;for (let i = 0; i < this.length; i++) {<br>\n&emsp;&emsp;this[i] = this[i].toFixed(2);<br>\n&emsp;}<br>\n}\n\nGross! This is why for...in loops are discouraged when looping over arrays.\n\n> **NOTE:** The **forEach loop** is another type of for loop in JavaScript. However, `forEach()` is actually an array method, so it can only be used exclusively with arrays. There is also no way to stop or break a forEach loop. If you need that type of behavior in your loop, you‚Äôll have to use a basic for loop.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 196738,
          "key": "f1955923-744a-4906-8f64-1ddcb34c6da2",
          "title": "For...of Loop",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "f1955923-744a-4906-8f64-1ddcb34c6da2",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 196749,
              "key": "e45708c8-1f81-4c3c-9dd7-697c84434d3d",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Finally, we have the mighty for...of loop.\n\n## For...of loop\n\nThe **for...of loop** is used to loop over any type of data that is _iterable_.\n\nYou write a **for...of** loop almost exactly like you would write a **for...in** loop, except you swap out `in` with `of` and you can drop the **index**.\n\n```js\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const digit of digits) {\n  console.log(digit);\n}\n```\n> **Prints:**<br>\n0<br>\n1<br>\n2<br>\n3<br>\n4<br>\n5<br>\n6<br>\n7<br>\n8<br> \n9\n\nThis makes the for...of loop the most concise version of all the for loops.\n\n> **TIP:** It‚Äôs good practice to use plural names for objects that are collections of values. That way, when you loop over the collection, you can use the singular version of the name when referencing individual values in the collection. For example, `for (const button of buttons) {...}`.",
              "instructor_notes": ""
            },
            {
              "id": 197650,
              "key": "5cbff402-b02f-460d-8989-1307e4e80e99",
              "title": "Progression of For Loops in JavaScript",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">Progression from the for loop to the for...in loop to the for...of loop.</div>",
              "video": {
                "youtube_id": "2GTqDo9bbOM",
                "china_cdn_id": "2GTqDo9bbOM.mp4"
              }
            },
            {
              "id": 197649,
              "key": "9b85051a-1082-4706-be9a-994a46b433ca",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "But wait, there‚Äôs more! The for...of loop also has some additional benefits that fix the weaknesses of the for and for...in loops.\n\nYou can stop or break a for...of loop at anytime.\n\n```js\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const digit of digits) {\n  if (digit % 2 === 0) {\n    continue;\n  }\n  console.log(digit);\n}\n```\n> **Prints:**<br>\n1<br>\n3<br>\n5<br>\n7<br> \n9\n\nAnd you don‚Äôt have to worry about adding new properties to objects. The for...of loop will only loop over the values in the object.\n\n```js\nArray.prototype.decimalfy = function() {\n  for (i = 0; i < this.length; i++) {\n    this[i] = this[i].toFixed(2);\n  }\n};\n\nconst digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nfor (const digit of digits) {\n  console.log(digit);\n}\n```\n> **Prints:**<br>\n0<br>\n1<br>\n2<br>\n3<br>\n4<br>\n5<br>\n6<br>\n7<br>\n8<br> \n9\n\nThis time, the properties were *not* printed out to the console, like we saw on the prior page.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 217400,
          "key": "60509a69-3474-45e9-bca5-f3439b6c9cab",
          "title": "Quiz: Writing a For...of Loop (1-4)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "60509a69-3474-45e9-bca5-f3439b6c9cab",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 256045,
              "key": "571317d9-a4a2-4973-a2e3-18ccf4043f29",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nWrite a `for...of` loop that:\n\n* loops through each day in the `days` array\n* capitalizes the first letter of the day\n* and prints the day out to the console",
              "instructor_notes": ""
            },
            {
              "id": 283347,
              "key": "9ac77835-a76f-4a74-ba22-b8d989aae770",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Your code should log the following to the console:\n\n> Sunday<br>\n> Monday<br>\n> Tuesday<br>\n> Wednesday<br>\n>Thursday<br>\n>Friday<br>\n>Saturday \n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 258950,
              "key": "d131c711-b8de-4798-ade4-eed84f3e75c8",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "d131c711-b8de-4798-ade4-eed84f3e75c8",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "4944563459457024",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Writing a For...of Loop (1-4)\n */\n\nconst days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\n\n// your code goes here\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 909632,
              "key": "105fd03e-a841-40a0-bf1d-9c45ff4974c2",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div id=\"spoiler_1\" style=\"display:none\">\n```\nfor (const day of days) {\n  var upperDay = day.charAt(0).toUpperCase() + day.slice(1);\n  console.log(upperDay);\n}\n```\n</div>\n<button title=\"Click to show/hide content\" type=\"button\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}\">Show Solution</button>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 196704,
          "key": "398d36e6-3393-4c50-b870-44a4dffb0ac4",
          "title": "Spread... Operator",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "398d36e6-3393-4c50-b870-44a4dffb0ac4",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197019,
              "key": "60de06e8-d63e-4a68-8dfd-51ba01f50d69",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "Time to switch gears for a moment and check out the spread operator!\n\n## Spread operator\n\nThe **spread operator**, written with three consecutive dots ( `...` ), is new in ES6 and gives you the ability to expand, or _spread_, [iterable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterators) into multiple elements.\n\nLet‚Äôs take a look at a few examples to see how it works.\n\n```js\nconst books = [\"Don Quixote\", \"The Hobbit\", \"Alice in Wonderland\", \"Tale of Two Cities\"];\nconsole.log(...books);\n```\n> **Prints:** Don Quixote The Hobbit Alice in Wonderland Tale of Two Cities\n\n```js\nconst primes = new Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]);\nconsole.log(...primes);\n```\n> **Prints:** 2 3 5 7 11 13 17 19 23 29\n\nIf you look at the output from the examples, notice that both the array and set have been expanded into their individual elements. So how is this useful?\n\n> **NOTE:** Sets are a new built-in object in ES6 that we‚Äôll cover in more detail in a future lesson.",
              "instructor_notes": ""
            },
            {
              "id": 283329,
              "key": "3682d4ab-8a31-4eb7-9acd-5fc0f9377217",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "### Combining arrays with concat\n\nOne example of when the spread operator can be useful is when combining arrays.\n\nIf you‚Äôve ever needed to combine multiple arrays, prior to the spread operator, you were forced to use the Array‚Äôs `concat()` method.\n\n```js\nconst fruits = [\"apples\", \"bananas\", \"pears\"];\nconst vegetables = [\"corn\", \"potatoes\", \"carrots\"];\nconst produce = fruits.concat(vegetables);\nconsole.log(produce);\n```\n> **Prints:** [\"apples\", \"bananas\", \"pears\", \"corn\", \"potatoes\", \"carrots\"]\n\nThis isn‚Äôt terrible, but wouldn‚Äôt it be nice if there was a shorthand way to write this code?\n\nFor example, something like‚Ä¶\n\n> ### ‚ö†Ô∏è Upcoming `const` Warning ‚ö†Ô∏è\n> If you're following along by copy/pasting the code, then you've already declared the `produce` variable with the `const` keyword. The following code will try to redeclare _and_ reassign the variable, so depending on how you're running the code, it might throw an error.\n> \n> Remember that variables declared with  `const` cannot be redeclared or reassigned in the same scope.\n\n```js\nconst produce = [fruits, vegetables];\nconsole.log(produce);\n```\n> **Prints:** [Array[3], Array[3]]\n\nUnfortunately, that doesn‚Äôt work.\n\nInstead of combining both arrays, this code actually adds the `fruits` array at the first index and the `vegetables` array at the second index of the `produce` array.\n\nHow about trying the spread operator?",
              "instructor_notes": ""
            },
            {
              "id": 197020,
              "key": "c837f4dc-f9d8-4395-a91d-50be1383d858",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "c837f4dc-f9d8-4395-a91d-50be1383d858",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5318067334807552",
                "initial_code_files": [
                  {
                    "text": "/*\n * Instructions: Use the spread operator to combine the `fruits` and `vegetables` arrays into the `produce` array.\n */\n\nconst fruits = [\"apples\", \"bananas\", \"pears\"];\nconst vegetables = [\"corn\", \"potatoes\", \"carrots\"];\n\nconst produce = [];\n\nconsole.log(produce);\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            },
            {
              "id": 909634,
              "key": "2c6b554d-7759-46b3-9434-001a88e119bb",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "<div id=\"spoiler_1\" style=\"display:none\">\n```\nproduce = [...fruits, ...vegetables]\n\nconsole.log(produce);\n```\n</div>\n<button title=\"Click to show/hide content\" type=\"button\" onclick=\"if(document.getElementById('spoiler_1') .style.display=='none') {document.getElementById('spoiler_1') .style.display=''}else{document.getElementById('spoiler_1') .style.display='none'}\">Show Solution</button>",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 196705,
          "key": "59aad850-4429-42b8-a9e8-f4a7dded102f",
          "title": "...Rest Parameter",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "59aad850-4429-42b8-a9e8-f4a7dded102f",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 197021,
              "key": "d6d298b9-f83b-41b1-aa46-5a4c6a5dafe5",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "If you can use the spread operator to _spread_ an array into multiple elements, then certainly there should be a way to bundle multiple elements back into an array, right?\n\nIn fact, there is! It‚Äôs called the _rest parameter_, and it‚Äôs another new addition in ES6.\n\n## Rest parameter\n\nThe **rest parameter**, also written with three consecutive dots ( `...` ), allows you to represent an indefinite number of elements as an array. This can be helpful in a couple of different situations.\n\nOne situation is when assigning the values of an array to variables. For example,\n\n```js\nconst order = [20.17, 18.67, 1.50, \"cheese\", \"eggs\", \"milk\", \"bread\"];\nconst [total, subtotal, tax, ...items] = order;\nconsole.log(total, subtotal, tax, items);\n```\n> **Prints:** 20.17 18.67 1.5 [\"cheese\", \"eggs\", \"milk\", \"bread\"]\n\nThis code takes the values of the  `order` array and assigns them to individual variables using destructuring (as you saw in the Destructuring section earlier in this lesson). `total`, `subtotal`, and `tax` are assigned the first three values in the array, however, `items` is where you want to pay the most attention.\n\nBy using the rest parameter, `items` is assigned the _rest_ of the values in the array (as an array).",
              "instructor_notes": ""
            },
            {
              "id": 301422,
              "key": "de0260f8-3acf-4cc8-ab2c-616f2a50efbf",
              "title": "Spread Operator and Rest Parameter Animation",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "<div style=\"text-align: center; color: #afafaf; font-size: 14px; margin-top: 15px;\">You can think of the rest parameter like the opposite of the spread operator; if the spread operator is like unboxing all of the contents of a package, then the rest parameter is like taking all the contents and putting them back into the package.</div>",
              "video": {
                "youtube_id": "vRtfwfqnVSs",
                "china_cdn_id": "vRtfwfqnVSs.mp4"
              }
            },
            {
              "id": 259972,
              "key": "37eaeb3f-194b-4317-9afd-9bcea6a4f671",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Variadic functions\n\nAnother use case for the rest parameter is when you‚Äôre working with variadic functions. **Variadic functions** are functions that take an indefinite number of arguments.\n\nFor example, let‚Äôs say we have a function called `sum()` which calculates the sum of an indefinite amount of numbers. How might the `sum()` function be called during execution?\n\n```js\nsum(1, 2);\nsum(10, 36, 7, 84, 90, 110);\nsum(-23, 3000, 575000);\n```\n\nThere‚Äôs literally an endless number of ways the `sum()` function could be called. Regardless of the amount of numbers passed to the function, it should always return the total sum of the numbers.\n\n### Using the arguments object\n\nIn previous versions of JavaScript, this type of function would be handled using the [arguments object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments). The **arguments object** is an array-like object that is available as a local variable inside all functions. It contains a value for each argument being passed to the function starting at 0 for the first argument, 1 for the second argument, and so on.\n\nIf we look at the implementation of our `sum()` function, then you‚Äôll see how the arguments object could be used to handle the variable amount of numbers being passed to it.\n\n```js\nfunction sum() {\n  let total = 0;  \n  for(const argument of arguments) {\n    total += argument;\n  }\n  return total;\n}\n```\n\nNow this works fine, but it does have its issues:\n\n1. If you look at the definition for the `sum()` function, it doesn‚Äôt have any parameters.\n  * This is misleading because we know the `sum()` function can handle an indefinite amount of arguments.\n2. It can be hard to understand.\n  * If you‚Äôve never used the arguments object before, then you would most likely look at this code and wonder where the arguments object is even coming from. Did it appear out of thin air? It certainly looks that way.\n\n### Using the rest parameter\n\nFortunately, with the addition of the rest parameter, you can rewrite the `sum()` function to read more clearly.\n\n```js\nfunction sum(...nums) {\n  let total = 0;  \n  for(const num of nums) {\n    total += num;\n  }\n  return total;\n}\n```\n\nThis version of the `sum()` function is both **more concise** and is **easier to read**. Remember, we use the [`for...of loop`](https://classroom.udacity.com/nanodegrees/nd016/parts/11a45d59-bb81-44a9-be76-042c99e5f051/modules/cbf6deb8-d2cc-4757-b3a9-a1c58a4acd82/lessons/42383e89-ac6a-491a-b7d0-198851287bbe/concepts/f1955923-744a-4906-8f64-1ddcb34c6da2#) to loop over any type of data that is iterable. So we'll use `for...of` here rather than `for...in`.",
              "instructor_notes": ""
            }
          ]
        },
        {
          "id": 217393,
          "key": "6a6c5deb-2f06-4cd7-afab-222716634f10",
          "title": "Quiz: Using the Rest Parameter (1-5)",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "6a6c5deb-2f06-4cd7-afab-222716634f10",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 256047,
              "key": "7de8342b-002c-4a18-93e1-29109c0e045e",
              "title": null,
              "semantic_type": "TextAtom",
              "is_public": true,
              "text": "## Directions:\n\nUse the rest parameter to create an `average()` function that calculates the average of an _unlimited_ amount of numbers.\n\n> **TIP:** Make sure to test your code with different values. For example,<br><br>\n> `average(2, 6)` should return `4`<br>\n> `average(2, 3, 3, 5, 7, 10)` should return `5`<br>\n> `average(7, 1432, 12, 13, 100)` should return `312.8`<br>\n> `average()` should return `0`\n\n## Your Code:",
              "instructor_notes": ""
            },
            {
              "id": 258951,
              "key": "a133cf22-53e1-46d5-95f4-3bfd4bd53bf6",
              "title": "",
              "semantic_type": "QuizAtom",
              "is_public": true,
              "instructor_notes": "",
              "user_state": {
                "node_key": "a133cf22-53e1-46d5-95f4-3bfd4bd53bf6",
                "completed_at": null,
                "last_viewed_at": null,
                "unstructured": null
              },
              "instruction": null,
              "question": {
                "title": "",
                "semantic_type": "ProgrammingQuestion",
                "evaluation_id": "5747611345747968",
                "initial_code_files": [
                  {
                    "text": "/*\n * Programming Quiz: Using the Rest Parameter (1-5)\n */\n\n// your code goes here\n\nfunction average() {\n    \n}\n\nconsole.log(average(2, 6));\nconsole.log(average(2, 3, 3, 5, 7, 10));\nconsole.log(average(7, 1432, 12, 13, 100));\nconsole.log(average());\n",
                    "name": "StudentMain.js"
                  }
                ]
              },
              "answer": null
            }
          ]
        },
        {
          "id": 196707,
          "key": "bd715feb-2540-4f45-9144-8bd6b708f0cd",
          "title": "Lesson 1 Summary",
          "semantic_type": "Concept",
          "is_public": true,
          "user_state": {
            "node_key": "bd715feb-2540-4f45-9144-8bd6b708f0cd",
            "completed_at": null,
            "last_viewed_at": null,
            "unstructured": null
          },
          "resources": null,
          "atoms": [
            {
              "id": 232930,
              "key": "16372722-3bd4-479c-bf55-5ea1ab173dbc",
              "title": "Lesson 1 Summary",
              "semantic_type": "VideoAtom",
              "is_public": true,
              "instructor_notes": "",
              "video": {
                "youtube_id": "EG4B0JEkLzk",
                "china_cdn_id": "EG4B0JEkLzk.mp4"
              }
            }
          ]
        }
      ]
    }
  }
}